{
    "docs": [
        {
            "location": "/",
            "text": "Tree-based Pipeline Optimization Tool (TPOT)\n\n\nConsider TPOT your \nData Science Assistant\n. TPOT is a Python tool that automatically creates and optimizes machine learning pipelines using genetic programming.\n\n\n\n\n\n\n\n\n\n\n\n\nTPOT will automate the most tedious part of machine learning by intelligently exploring thousands of possible pipelines to find the best one for your data.\n\n\n\n\n\n\n\n\nAn example machine learning pipeline\n\n\n\n\n\n\nOnce TPOT is finished searching (or you get tired of waiting), it provides you with the Python code for the best pipeline it found so you can tinker with the pipeline from there.\n\n\n\n\n\n\n\n\nAn example TPOT pipeline\n\n\n\n\n\n\nTPOT is built on top of scikit-learn, so all of the code it generates should look familiar... if you're familiar with scikit-learn, anyway.\n\n\nTPOT is still under active development\n and we encourage you to check back on this repository regularly for updates.\n\n\nLicense\n\n\nPlease see the \nrepository license\n for the licensing and usage information for TPOT.\n\n\nGenerally, we have licensed TPOT to make it as widely usable as possible.",
            "title": "Home"
        },
        {
            "location": "/#tree-based-pipeline-optimization-tool-tpot",
            "text": "Consider TPOT your  Data Science Assistant . TPOT is a Python tool that automatically creates and optimizes machine learning pipelines using genetic programming.       TPOT will automate the most tedious part of machine learning by intelligently exploring thousands of possible pipelines to find the best one for your data.     An example machine learning pipeline    Once TPOT is finished searching (or you get tired of waiting), it provides you with the Python code for the best pipeline it found so you can tinker with the pipeline from there.     An example TPOT pipeline    TPOT is built on top of scikit-learn, so all of the code it generates should look familiar... if you're familiar with scikit-learn, anyway.  TPOT is still under active development  and we encourage you to check back on this repository regularly for updates.",
            "title": "Tree-based Pipeline Optimization Tool (TPOT)"
        },
        {
            "location": "/#license",
            "text": "Please see the  repository license  for the licensing and usage information for TPOT.  Generally, we have licensed TPOT to make it as widely usable as possible.",
            "title": "License"
        },
        {
            "location": "/installing/",
            "text": "Installation\n\n\nTPOT is built on top of several existing Python libraries, including:\n\n\n\n\n\n\nNumPy\n\n\n\n\n\n\nSciPy\n\n\n\n\n\n\npandas\n\n\n\n\n\n\nscikit-learn\n\n\n\n\n\n\nDEAP\n\n\n\n\n\n\nXGBoost\n\n\n\n\n\n\nExcept for DEAP, all of the necessary Python packages can be installed via the \nAnaconda Python distribution\n, which we strongly recommend that you use. We also strongly recommend that you use of Python 3 over Python 2 if you're given the choice.\n\n\nNumPy, SciPy, pandas, and scikit-learn can be installed in Anaconda via the command:\n\n\nconda install numpy scipy pandas scikit-learn\n\n\n\n\nDEAP and XGBoost can be installed with \npip\n via the command:\n\n\npip install deap xgboost\n\n\n\n\nOptional: For OS X users who want to use OpenMP-enabled compilers to install XGBoost, gcc-5.x.x can be installed with Homebrew: \nbrew install gcc --without-multilib\n.\n\n\nFinally to install TPOT itself, run the following command:\n\n\npip install tpot\n\n\n\n\nPlease \nfile a new issue\n if you run into installation problems.",
            "title": "Installation"
        },
        {
            "location": "/installing/#installation",
            "text": "TPOT is built on top of several existing Python libraries, including:    NumPy    SciPy    pandas    scikit-learn    DEAP    XGBoost    Except for DEAP, all of the necessary Python packages can be installed via the  Anaconda Python distribution , which we strongly recommend that you use. We also strongly recommend that you use of Python 3 over Python 2 if you're given the choice.  NumPy, SciPy, pandas, and scikit-learn can be installed in Anaconda via the command:  conda install numpy scipy pandas scikit-learn  DEAP and XGBoost can be installed with  pip  via the command:  pip install deap xgboost  Optional: For OS X users who want to use OpenMP-enabled compilers to install XGBoost, gcc-5.x.x can be installed with Homebrew:  brew install gcc --without-multilib .  Finally to install TPOT itself, run the following command:  pip install tpot  Please  file a new issue  if you run into installation problems.",
            "title": "Installation"
        },
        {
            "location": "/Using_TPOT/",
            "text": "TPOT on the command line\n\n\nTo use TPOT via the command line, enter the following command to see the parameters that TPOT can receive:\n\n\ntpot --help\n\n\n\n\nThe following parameters will display along with their descriptions:\n\n\n\n\n-i\n / \nINPUT_FILE\n: The path to the data file to optimize the pipeline on. Make sure that the class column in the file is labeled as \"class\".\n\n\n-is\n / \nINPUT_SEPARATOR\n: The character used to separate columns in the input file. Commas (,) and tabs (\\t) are the most common separators.\n\n\n-o\n / \nOUTPUT_FILE\n: The path to a file that you wish to export the pipeline code into. By default, exporting is disabled.\n\n\n-g\n / \nGENERATIONS\n: The number of generations to run pipeline optimization for. Must be > 0. The more generations you give TPOT to run, the longer it takes, but it's also more likely to find better pipelines.\n\n\n-p\n / \nPOPULATION\n: The number of pipelines in the genetic algorithm population. Must be > 0. The more pipelines in the population, the slower TPOT will run, but it's also more likely to find better pipelines.\n\n\n-mr\n / \nMUTATION_RATE\n: The mutation rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to apply random changes to every generation. We don't recommend that you tweak this parameter unless you know what you're doing.\n\n\n-xr\n / \nCROSSOVER_RATE\n: The crossover rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to \"breed\" every generation. We don't recommend that you tweak this parameter unless you know what you're doing.\n\n\n-s\n / \nRANDOM_STATE\n: The random number generator seed for TPOT. Use this to make sure that TPOT will give you the same results each time you run it against the same data set with that seed.\n\n\n-v\n / \nVERBOSITY\n: How much information TPOT communicates while it's running. 0 = none, 1 = minimal, 2 = all\n\n\n\n\nAn example command-line call to TPOT may look like:\n\n\ntpot -i data/mnist.csv -is , -o tpot_exported_pipeline.py -g 100 -s 42 -v 2\n\n\n\n\nTPOT with code\n\n\nWe've taken care to design the TPOT interface to be as similar as possible to scikit-learn.\n\n\nTPOT can be imported just like any regular Python module. To import TPOT, type:\n\n\nfrom tpot import TPOT\n\n\n\n\nthen create an instance of TPOT as follows:\n\n\nfrom tpot import TPOT\n\npipeline_optimizer = TPOT()\n\n\n\n\nNote that you can pass several parameters to the TPOT instantiation call:\n\n\n\n\ngenerations\n: The number of generations to run pipeline optimization for. Must be > 0. The more generations you give TPOT to run, the longer it takes, but it's also more likely to find better pipelines.\n\n\npopulation_size\n: The number of pipelines in the genetic algorithm population. Must be > 0. The more pipelines in the population, the slower TPOT will run, but it's also more likely to find better pipelines.\n\n\nmutation_rate\n: The mutation rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to apply random changes to every generation. We don't recommend that you tweak this parameter unless you know what you're doing.\n\n\ncrossover_rate\n: The crossover rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to \"breed\" every generation. We don't recommend that you tweak this parameter unless you know what you're doing.\n\n\nrandom_state\n: The random number generator seed for TPOT. Use this to make sure that TPOT will give you the same results each time you run it against the same data set with that seed.\n\n\nverbosity\n: How much information TPOT communicates while it's running. 0 = none, 1 = minimal, 2 = all\n\n\n\n\nSome example code with custom TPOT parameters might look like:\n\n\nfrom tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\n\n\n\n\nNow TPOT is ready to work! You can tell TPOT to optimize a pipeline based on a data set with the \nfit\n function:\n\n\nfrom tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)\n\n\n\n\nThe \nfit()\n function takes in a training data set, then further divides it into a training and validation data set (so as to do cross-validation). It then initializes the Genetic Algoritm to find the best pipeline based on the validation set performance evaluated on the basis of a scoring function (generally the classification accuracy, but can be user defined as well like precision/recall/f1, etc).   \n\n\nYou can then proceed to evaluate the final pipeline on the test set with the \nscore()\n function:\n\n\nfrom tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)\nprint(pipeline_optimizer.score(training_features, training_classes,\n                               testing_features, testing_classes))\n\n\n\n\nNote that you currently need to pass the training data to the \nscore()\n function so TPOT re-trains the optimized pipeline on the training data.\n\n\nYou also have the option to pass a user-defined scoring function to \nscore()\n. For more information on this functionality, check \nhere\n. \n\n\nFinally, you can tell TPOT to export the corresponding Python code for the optimized pipeline to a text file with the \nexport()\n function:\n\n\nfrom tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)\nprint(pipeline_optimizer.score(training_features, training_classes, testing_features, testing_classes))\npipeline_optimizer.export('tpot_exported_pipeline.py')\n\n\n\n\nOnce this code finishes running, \ntpot_exported_pipeline.py\n will contain the Python code for the optimized pipeline.\n\n\nCheck our \nexamples\n to see TPOT applied to some specific data sets.",
            "title": "Using TPOT"
        },
        {
            "location": "/Using_TPOT/#tpot-on-the-command-line",
            "text": "To use TPOT via the command line, enter the following command to see the parameters that TPOT can receive:  tpot --help  The following parameters will display along with their descriptions:   -i  /  INPUT_FILE : The path to the data file to optimize the pipeline on. Make sure that the class column in the file is labeled as \"class\".  -is  /  INPUT_SEPARATOR : The character used to separate columns in the input file. Commas (,) and tabs (\\t) are the most common separators.  -o  /  OUTPUT_FILE : The path to a file that you wish to export the pipeline code into. By default, exporting is disabled.  -g  /  GENERATIONS : The number of generations to run pipeline optimization for. Must be > 0. The more generations you give TPOT to run, the longer it takes, but it's also more likely to find better pipelines.  -p  /  POPULATION : The number of pipelines in the genetic algorithm population. Must be > 0. The more pipelines in the population, the slower TPOT will run, but it's also more likely to find better pipelines.  -mr  /  MUTATION_RATE : The mutation rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to apply random changes to every generation. We don't recommend that you tweak this parameter unless you know what you're doing.  -xr  /  CROSSOVER_RATE : The crossover rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to \"breed\" every generation. We don't recommend that you tweak this parameter unless you know what you're doing.  -s  /  RANDOM_STATE : The random number generator seed for TPOT. Use this to make sure that TPOT will give you the same results each time you run it against the same data set with that seed.  -v  /  VERBOSITY : How much information TPOT communicates while it's running. 0 = none, 1 = minimal, 2 = all   An example command-line call to TPOT may look like:  tpot -i data/mnist.csv -is , -o tpot_exported_pipeline.py -g 100 -s 42 -v 2",
            "title": "TPOT on the command line"
        },
        {
            "location": "/Using_TPOT/#tpot-with-code",
            "text": "We've taken care to design the TPOT interface to be as similar as possible to scikit-learn.  TPOT can be imported just like any regular Python module. To import TPOT, type:  from tpot import TPOT  then create an instance of TPOT as follows:  from tpot import TPOT\n\npipeline_optimizer = TPOT()  Note that you can pass several parameters to the TPOT instantiation call:   generations : The number of generations to run pipeline optimization for. Must be > 0. The more generations you give TPOT to run, the longer it takes, but it's also more likely to find better pipelines.  population_size : The number of pipelines in the genetic algorithm population. Must be > 0. The more pipelines in the population, the slower TPOT will run, but it's also more likely to find better pipelines.  mutation_rate : The mutation rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to apply random changes to every generation. We don't recommend that you tweak this parameter unless you know what you're doing.  crossover_rate : The crossover rate for the genetic programming algorithm in the range [0.0, 1.0]. This tells the genetic programming algorithm how many pipelines to \"breed\" every generation. We don't recommend that you tweak this parameter unless you know what you're doing.  random_state : The random number generator seed for TPOT. Use this to make sure that TPOT will give you the same results each time you run it against the same data set with that seed.  verbosity : How much information TPOT communicates while it's running. 0 = none, 1 = minimal, 2 = all   Some example code with custom TPOT parameters might look like:  from tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)  Now TPOT is ready to work! You can tell TPOT to optimize a pipeline based on a data set with the  fit  function:  from tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)  The  fit()  function takes in a training data set, then further divides it into a training and validation data set (so as to do cross-validation). It then initializes the Genetic Algoritm to find the best pipeline based on the validation set performance evaluated on the basis of a scoring function (generally the classification accuracy, but can be user defined as well like precision/recall/f1, etc).     You can then proceed to evaluate the final pipeline on the test set with the  score()  function:  from tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)\nprint(pipeline_optimizer.score(training_features, training_classes,\n                               testing_features, testing_classes))  Note that you currently need to pass the training data to the  score()  function so TPOT re-trains the optimized pipeline on the training data.  You also have the option to pass a user-defined scoring function to  score() . For more information on this functionality, check  here .   Finally, you can tell TPOT to export the corresponding Python code for the optimized pipeline to a text file with the  export()  function:  from tpot import TPOT\n\npipeline_optimizer = TPOT(generations=100, random_state=42, verbosity=2)\npipeline_optimizer.fit(training_features, training_classes)\nprint(pipeline_optimizer.score(training_features, training_classes, testing_features, testing_classes))\npipeline_optimizer.export('tpot_exported_pipeline.py')  Once this code finishes running,  tpot_exported_pipeline.py  will contain the Python code for the optimized pipeline.  Check our  examples  to see TPOT applied to some specific data sets.",
            "title": "TPOT with code"
        },
        {
            "location": "/examples/MNIST_Example/",
            "text": "MNIST Example\n\n\nBelow is a minimal working example with the practice MNIST data set.\n\n\nfrom tpot import TPOT\nfrom sklearn.datasets import load_digits\nfrom sklearn.cross_validation import train_test_split\n\ndigits = load_digits()\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target,\n                                                    train_size=0.75, test_size=0.25)\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint(tpot.score(X_train, y_train, X_test, y_test))\ntpot.export('tpot_mnist_pipeline.py')\n\n\n\n\nRunning this code should discover a pipeline that achieves ~98% testing accuracy, and the corresponding Python code should be exported to the \ntpot_mnist_pipeline.py\n file and look similar to the following:\n\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.cross_validation import StratifiedShuffleSplit\nfrom sklearn.linear_model import LogisticRegression\n\n# NOTE: Make sure that the class is labeled 'class' in the data file\ntpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR')\ntraining_indeces, testing_indeces = next(iter(StratifiedShuffleSplit(tpot_data['class'].values, n_iter=1, train_size=0.75, test_size=0.25)))\n\nresult1 = tpot_data.copy()\n\n# Perform classification with a logistic regression classifier\nlrc1 = LogisticRegression(C=2.8214285714285716)\nlrc1.fit(result1.loc[training_indeces].drop('class', axis=1).values, result1.loc[training_indeces, 'class'].values)\nresult1['lrc1-classification'] = lrc1.predict(result1.drop('class', axis=1).values)",
            "title": "MNIST Example"
        },
        {
            "location": "/examples/MNIST_Example/#mnist-example",
            "text": "Below is a minimal working example with the practice MNIST data set.  from tpot import TPOT\nfrom sklearn.datasets import load_digits\nfrom sklearn.cross_validation import train_test_split\n\ndigits = load_digits()\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target,\n                                                    train_size=0.75, test_size=0.25)\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint(tpot.score(X_train, y_train, X_test, y_test))\ntpot.export('tpot_mnist_pipeline.py')  Running this code should discover a pipeline that achieves ~98% testing accuracy, and the corresponding Python code should be exported to the  tpot_mnist_pipeline.py  file and look similar to the following:  import numpy as np\nimport pandas as pd\n\nfrom sklearn.cross_validation import StratifiedShuffleSplit\nfrom sklearn.linear_model import LogisticRegression\n\n# NOTE: Make sure that the class is labeled 'class' in the data file\ntpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR')\ntraining_indeces, testing_indeces = next(iter(StratifiedShuffleSplit(tpot_data['class'].values, n_iter=1, train_size=0.75, test_size=0.25)))\n\nresult1 = tpot_data.copy()\n\n# Perform classification with a logistic regression classifier\nlrc1 = LogisticRegression(C=2.8214285714285716)\nlrc1.fit(result1.loc[training_indeces].drop('class', axis=1).values, result1.loc[training_indeces, 'class'].values)\nresult1['lrc1-classification'] = lrc1.predict(result1.drop('class', axis=1).values)",
            "title": "MNIST Example"
        },
        {
            "location": "/examples/IRIS_Example/",
            "text": "IRIS Example\n\n\nThe following code illustrates the usage of TPOT with the IRIS data set. \n\n\nfrom tpot import TPOT\nfrom sklearn.datasets import load_iris\nfrom sklearn.cross_validation import train_test_split\n\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, train_size=0.75, test_size=0.25)\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint(tpot.score(X_train, y_train, X_test, y_test))\ntpot.export('tpot_iris_pipeline.py')\n\n\n\n\nRunning this code should discover a pipeline that achieves ~92% testing accuracy. Note that sometimes when both \ntrain_size\n and \ntest_size\n aren't specified in \ntrain_test_split()\n calls, the split doesn't use the entire data set, so we need to specify both.\n\n\nFor details on how the \nfit()\n, \nscore()\n and \nexport()\n functions work, see the \nusage documentation\n\n\nAfter running the above code, the corresponding Python code should be exported to the \ntpot_iris_pipeline.py\n file and look similar to the following:\n\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.cross_validation import StratifiedShuffleSplit\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# NOTE: Make sure that the class is labeled 'class' in the data file\ntpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR')\ntraining_indeces, testing_indeces = next(iter(StratifiedShuffleSplit(tpot_data['class'].values, n_iter=1, train_size=0.75, test_size=0.25)))\n\nresult1 = tpot_data.copy()\n\n# Perform classification with a C-support vector classifier\nsvc1 = SVC(C=0.1)\nsvc1.fit(result1.loc[training_indeces].drop('class', axis=1).values, result1.loc[training_indeces, 'class'].values)\nresult1['svc1-classification'] = svc1.predict(result1.drop('class', axis=1).values)\n\n# Subset the data columns\nsubset_df1 = result1[sorted(result1.columns.values)[4042:5640]]\nsubset_df2 = result1[[column for column in ['class'] if column not in subset_df1.columns.values]]\nresult2 = subset_df1.join(subset_df2)\n\n# Perform classification with a k-nearest neighbor classifier\nknnc3 = KNeighborsClassifier(n_neighbors=min(131, len(training_indeces)))\nknnc3.fit(result2.loc[training_indeces].drop('class', axis=1).values, result2.loc[training_indeces, 'class'].values)\nresult3 = result2\nresult3['knnc3-classification'] = knnc3.predict(result3.drop('class', axis=1).values)",
            "title": "IRIS Example"
        },
        {
            "location": "/examples/IRIS_Example/#iris-example",
            "text": "The following code illustrates the usage of TPOT with the IRIS data set.   from tpot import TPOT\nfrom sklearn.datasets import load_iris\nfrom sklearn.cross_validation import train_test_split\n\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, train_size=0.75, test_size=0.25)\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint(tpot.score(X_train, y_train, X_test, y_test))\ntpot.export('tpot_iris_pipeline.py')  Running this code should discover a pipeline that achieves ~92% testing accuracy. Note that sometimes when both  train_size  and  test_size  aren't specified in  train_test_split()  calls, the split doesn't use the entire data set, so we need to specify both.  For details on how the  fit() ,  score()  and  export()  functions work, see the  usage documentation  After running the above code, the corresponding Python code should be exported to the  tpot_iris_pipeline.py  file and look similar to the following:  import numpy as np\nimport pandas as pd\n\nfrom sklearn.cross_validation import StratifiedShuffleSplit\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# NOTE: Make sure that the class is labeled 'class' in the data file\ntpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR')\ntraining_indeces, testing_indeces = next(iter(StratifiedShuffleSplit(tpot_data['class'].values, n_iter=1, train_size=0.75, test_size=0.25)))\n\nresult1 = tpot_data.copy()\n\n# Perform classification with a C-support vector classifier\nsvc1 = SVC(C=0.1)\nsvc1.fit(result1.loc[training_indeces].drop('class', axis=1).values, result1.loc[training_indeces, 'class'].values)\nresult1['svc1-classification'] = svc1.predict(result1.drop('class', axis=1).values)\n\n# Subset the data columns\nsubset_df1 = result1[sorted(result1.columns.values)[4042:5640]]\nsubset_df2 = result1[[column for column in ['class'] if column not in subset_df1.columns.values]]\nresult2 = subset_df1.join(subset_df2)\n\n# Perform classification with a k-nearest neighbor classifier\nknnc3 = KNeighborsClassifier(n_neighbors=min(131, len(training_indeces)))\nknnc3.fit(result2.loc[training_indeces].drop('class', axis=1).values, result2.loc[training_indeces, 'class'].values)\nresult3 = result2\nresult3['knnc3-classification'] = knnc3.predict(result3.drop('class', axis=1).values)",
            "title": "IRIS Example"
        },
        {
            "location": "/examples/Titanic_Kaggle_Example/",
            "text": "Titanic Kaggle Example\n\n\nTo see the TPOT applied the Titanic Kaggle dataset, see the Jupyter notebook \nhere\n.",
            "title": "Titanic Kaggle Example"
        },
        {
            "location": "/examples/Titanic_Kaggle_Example/#titanic-kaggle-example",
            "text": "To see the TPOT applied the Titanic Kaggle dataset, see the Jupyter notebook  here .",
            "title": "Titanic Kaggle Example"
        },
        {
            "location": "/examples/Custom_Scoring_Functions/",
            "text": "Custom Scoring Functions\n\n\nBelow is a minimal working example of different scoring metrics/fitness functions used with the MNIST dataset.\n\n\n\nfrom tpot import TPOT\nfrom sklearn.datasets import load_digits\nfrom sklearn.cross_validation import train_test_split\n\ndigits = load_digits()\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target,\n                                                    train_size=0.75)\n\ndef precision(result):\n    all_class_tps = []\n    all_class_tps_fps = []\n    for this_class in all_classes:\n        #True Positives are those examples that belong to a class and whose class was guessed correctly\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        #False Positives are those examples that were guessed to belong to a class \n        this_class_tps_fps = len(result[(result['guess'] == this_class) \\\n            | (result['class'] == this_class)])\n        all_class_tps_fps.append(this_class_tps_fps)\n\n    micro_avg_precision = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fps)\n\n    return micro_avg_precision\n\ndef recall(result):\n    all_class_tps = []\n    all_class_tps_fns = []\n    for this_class in all_classes:\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)]) \n        #True Positives and False Negatives are those examples that belong to a specific class regardless of guess\n        this_class_tps_fns = len(result[(result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        all_class_tps_fns.append(this_class_tps_fns)\n\n    micro_avg_recall = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fns)\n    return micro_avg_recall\n\ndef f1(result):\n    all_class_tps = []\n    all_class_tps_fps = []\n    all_class_tps_fns = []\n    for this_class in all_classes:\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)])\n        this_class_tps_fns = len(result[(result['class'] == this_class)])\n        this_class_tps_fps = len(result[(result['guess'] == this_class) \\\n            | (result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        all_class_tps_fps.append(this_class_tps_fps)\n        all_class_tps_fns.append(this_class_tps_fns)\n    micro_avg_precision = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fps)\n    micro_avg_recall = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fns)\n    micro_avg_f1 = 2 * (micro_avg_precision * micro_avg_recall) / (micro_avg_precision + micro_avg_recall)\n\n    return micro_avg_f1\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint 'acc: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=precision)\ntpot.fit(X_train, y_train)\nprint 'precision: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=recall)\ntpot.fit(X_train, y_train)\nprint 'recall: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=f1)\ntpot.fit(X_train, y_train)\nprint 'f1: ', tpot.score(X_train, y_train, X_test, y_test)\n\n\n\n\n\nRunning this example should discover a pipeline that achieves ~98% testing accuracy, ~93% testing precision, ~97% testing recall, and ~95% testing f1.",
            "title": "Custom Scoring Functions"
        },
        {
            "location": "/examples/Custom_Scoring_Functions/#custom-scoring-functions",
            "text": "Below is a minimal working example of different scoring metrics/fitness functions used with the MNIST dataset.  \nfrom tpot import TPOT\nfrom sklearn.datasets import load_digits\nfrom sklearn.cross_validation import train_test_split\n\ndigits = load_digits()\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target,\n                                                    train_size=0.75)\n\ndef precision(result):\n    all_class_tps = []\n    all_class_tps_fps = []\n    for this_class in all_classes:\n        #True Positives are those examples that belong to a class and whose class was guessed correctly\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        #False Positives are those examples that were guessed to belong to a class \n        this_class_tps_fps = len(result[(result['guess'] == this_class) \\\n            | (result['class'] == this_class)])\n        all_class_tps_fps.append(this_class_tps_fps)\n\n    micro_avg_precision = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fps)\n\n    return micro_avg_precision\n\ndef recall(result):\n    all_class_tps = []\n    all_class_tps_fns = []\n    for this_class in all_classes:\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)]) \n        #True Positives and False Negatives are those examples that belong to a specific class regardless of guess\n        this_class_tps_fns = len(result[(result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        all_class_tps_fns.append(this_class_tps_fns)\n\n    micro_avg_recall = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fns)\n    return micro_avg_recall\n\ndef f1(result):\n    all_class_tps = []\n    all_class_tps_fps = []\n    all_class_tps_fns = []\n    for this_class in all_classes:\n        this_class_tps = len(result[(result['guess'] == this_class) \\\n            & (result['class'] == this_class)])\n        this_class_tps_fns = len(result[(result['class'] == this_class)])\n        this_class_tps_fps = len(result[(result['guess'] == this_class) \\\n            | (result['class'] == this_class)])\n        all_class_tps.append(this_class_tps)\n        all_class_tps_fps.append(this_class_tps_fps)\n        all_class_tps_fns.append(this_class_tps_fns)\n    micro_avg_precision = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fps)\n    micro_avg_recall = float(np.sum(all_class_tps)) / np.sum(all_class_tps_fns)\n    micro_avg_f1 = 2 * (micro_avg_precision * micro_avg_recall) / (micro_avg_precision + micro_avg_recall)\n\n    return micro_avg_f1\n\ntpot = TPOT(generations=5)\ntpot.fit(X_train, y_train)\nprint 'acc: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=precision)\ntpot.fit(X_train, y_train)\nprint 'precision: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=recall)\ntpot.fit(X_train, y_train)\nprint 'recall: ', tpot.score(X_train, y_train, X_test, y_test)\n\ntpot = TPOT(generations=5, scoring_function=f1)\ntpot.fit(X_train, y_train)\nprint 'f1: ', tpot.score(X_train, y_train, X_test, y_test)  Running this example should discover a pipeline that achieves ~98% testing accuracy, ~93% testing precision, ~97% testing recall, and ~95% testing f1.",
            "title": "Custom Scoring Functions"
        },
        {
            "location": "/documentation/",
            "text": "TPOT Object\n\n\n\n\nTPOT Object\n\n\n\n\n\n\nPipeline Operators\n\n\nModels\n\n\n\n\npipeline_operators.models.tree.DecisionTreeClassifier\n\n\npipeline_operators.models.ensemble.RandomForestClassifier\n\n\npipeline_operators.models.ensemble.XGBClassifier\n\n\npipeline_operators.models.svm.SVC\n\n\npipeline_operators.models.nearest_neighbors.kNeighborsClassifier\n\n\npipeline_operators.models.linear_model.LogisticRegression\n\n\n\n\nFeature Selection\n\n\n\n\npipeline_operators.feature_selection.VarianceThreshold\n\n\npipeline_operators.feature_selection.SelectKBest\n\n\npipeline_operators.feature_selection.SelectPercentile\n\n\npipeline_operators.feature_selection.RFE\n\n\n\n\nPre-processing\n\n\n\n\npipeline_operators.preprocessing.PolynomialFeatures\n\n\npipeline_operators.preprocessing.scaling.StandardScaler\n\n\npipeline_operators.preprocessing.scaling.RobustScaler\n\n\n\n\nDecomposition\n\n\n\n\npipeline_operators.decomposition.RandomizedPCA",
            "title": "Documentation"
        },
        {
            "location": "/documentation/#tpot-object",
            "text": "TPOT Object",
            "title": "TPOT Object"
        },
        {
            "location": "/documentation/#pipeline-operators",
            "text": "",
            "title": "Pipeline Operators"
        },
        {
            "location": "/documentation/#models",
            "text": "pipeline_operators.models.tree.DecisionTreeClassifier  pipeline_operators.models.ensemble.RandomForestClassifier  pipeline_operators.models.ensemble.XGBClassifier  pipeline_operators.models.svm.SVC  pipeline_operators.models.nearest_neighbors.kNeighborsClassifier  pipeline_operators.models.linear_model.LogisticRegression",
            "title": "Models"
        },
        {
            "location": "/documentation/#feature-selection",
            "text": "pipeline_operators.feature_selection.VarianceThreshold  pipeline_operators.feature_selection.SelectKBest  pipeline_operators.feature_selection.SelectPercentile  pipeline_operators.feature_selection.RFE",
            "title": "Feature Selection"
        },
        {
            "location": "/documentation/#pre-processing",
            "text": "pipeline_operators.preprocessing.PolynomialFeatures  pipeline_operators.preprocessing.scaling.StandardScaler  pipeline_operators.preprocessing.scaling.RobustScaler",
            "title": "Pre-processing"
        },
        {
            "location": "/documentation/#decomposition",
            "text": "pipeline_operators.decomposition.RandomizedPCA",
            "title": "Decomposition"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\n\nWe welcome you to \ncheck the existing issues\n for bugs or enhancements to work on. If you have an idea for an extension to TPOT, please \nfile a new issue\n so we can discuss it.\n\n\nHow to contribute\n\n\nThe preferred way to contribute to TPOT is to fork the \n\nmain repository\n on\nGitHub:\n\n\n\n\n\n\nFork the \nproject repository\n:\n   click on the 'Fork' button near the top of the page. This creates\n   a copy of the code under your account on the GitHub server.\n\n\n\n\n\n\nClone this copy to your local disk:\n\n\n  $ git clone git@github.com:YourLogin/tpot.git\n  $ cd tpot\n\n\n\n\n\n\n\nCreate a branch to hold your changes:\n\n\n  $ git checkout -b my-contribution\n\n\n\n\n\n\n\nand start making changes. Never work in the \nmaster\n branch!\n\n\n\n\nWork on this copy on your computer using Git to do the version\n   control. When you're done editing, do:\n  $ git add modified_files\n  $ git commit\n\n\n\n\n\n\n\nto record your changes in Git, then push them to GitHub with:\n\n\n      $ git push -u origin my-contribution\n\n\n\nFinally, go to the web page of your fork of the TPOT repo,\nand click 'Pull Request' (PR) to send your changes to the maintainers for\nreview. This will send an email to the maintainers.\n\n\n(If any of the above seems like magic to you, then look up the \n\nGit documentation\n on the web.)\n\n\nBefore submitting your pull request\n\n\nBefore you submit a pull request for your contribution, please work through this checklist to make sure that you have done everything necessary so we can efficiently review and accept your changes.\n\n\nIf your contribution changes TPOT in any way:\n\n\n\n\n\n\nUpdate the \ndocumentation\n so all of your changes are reflected there.\n\n\n\n\n\n\nUpdate the \nREADME\n if anything there has changed.\n\n\n\n\n\n\nIf your contribution involves any code changes:\n\n\n\n\n\n\nUpdate the \nproject unit tests\n to test your code changes.\n\n\n\n\n\n\nMake sure that your code is properly commented with \ndocstrings\n and comments explaining your rationale behind non-obvious coding practices.\n\n\n\n\n\n\nIf your code affected any of the pipeline operators, make sure that the corresponding \nexport functionality\n reflects those changes.\n\n\n\n\n\n\nIf your contribution requires a new library dependency outside of DEAP and scikit-learn:\n\n\n\n\n\n\nDouble-check that the new dependency is easy to install via \npip\n or Anaconda and supports both Python 2 and 3. If the dependency requires a complicated installation, then we most likely won't merge your changes because we want to keep TPOT easy to install.\n\n\n\n\n\n\nAdd the required version of the library to \n.travis.yml\n\n\n\n\n\n\nAdd a line to pip install the library to \n.travis_install.sh\n\n\n\n\n\n\nAdd a line to print the version of the library to \n.travis_install.sh\n\n\n\n\n\n\nSimilarly add a line to print the version of the library to \n.travis_test.sh\n\n\n\n\n\n\nAfter submitting your pull request\n\n\nAfter submitting your pull request, \nTravis-CI\n will automatically run unit tests on your changes and make sure that your updated code builds and runs on Python 2 and 3. We also use services that automatically check code quality and test coverage.\n\n\nCheck back shortly after submitting your pull request to make sure that your code passes these checks. If any of the checks come back with a red X, then do your best to address the errors.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "We welcome you to  check the existing issues  for bugs or enhancements to work on. If you have an idea for an extension to TPOT, please  file a new issue  so we can discuss it.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#how-to-contribute",
            "text": "The preferred way to contribute to TPOT is to fork the  main repository  on\nGitHub:    Fork the  project repository :\n   click on the 'Fork' button near the top of the page. This creates\n   a copy of the code under your account on the GitHub server.    Clone this copy to your local disk:    $ git clone git@github.com:YourLogin/tpot.git\n  $ cd tpot    Create a branch to hold your changes:    $ git checkout -b my-contribution    and start making changes. Never work in the  master  branch!   Work on this copy on your computer using Git to do the version\n   control. When you're done editing, do:   $ git add modified_files\n  $ git commit    to record your changes in Git, then push them to GitHub with:        $ git push -u origin my-contribution  Finally, go to the web page of your fork of the TPOT repo,\nand click 'Pull Request' (PR) to send your changes to the maintainers for\nreview. This will send an email to the maintainers.  (If any of the above seems like magic to you, then look up the  Git documentation  on the web.)",
            "title": "How to contribute"
        },
        {
            "location": "/contributing/#before-submitting-your-pull-request",
            "text": "Before you submit a pull request for your contribution, please work through this checklist to make sure that you have done everything necessary so we can efficiently review and accept your changes.  If your contribution changes TPOT in any way:    Update the  documentation  so all of your changes are reflected there.    Update the  README  if anything there has changed.    If your contribution involves any code changes:    Update the  project unit tests  to test your code changes.    Make sure that your code is properly commented with  docstrings  and comments explaining your rationale behind non-obvious coding practices.    If your code affected any of the pipeline operators, make sure that the corresponding  export functionality  reflects those changes.    If your contribution requires a new library dependency outside of DEAP and scikit-learn:    Double-check that the new dependency is easy to install via  pip  or Anaconda and supports both Python 2 and 3. If the dependency requires a complicated installation, then we most likely won't merge your changes because we want to keep TPOT easy to install.    Add the required version of the library to  .travis.yml    Add a line to pip install the library to  .travis_install.sh    Add a line to print the version of the library to  .travis_install.sh    Similarly add a line to print the version of the library to  .travis_test.sh",
            "title": "Before submitting your pull request"
        },
        {
            "location": "/contributing/#after-submitting-your-pull-request",
            "text": "After submitting your pull request,  Travis-CI  will automatically run unit tests on your changes and make sure that your updated code builds and runs on Python 2 and 3. We also use services that automatically check code quality and test coverage.  Check back shortly after submitting your pull request to make sure that your code passes these checks. If any of the checks come back with a red X, then do your best to address the errors.",
            "title": "After submitting your pull request"
        }
    ]
}